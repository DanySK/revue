@startuml

!startsub NotificationRoot

interface NotificationService {
  + getNotificationById(id: string): Promise<Notification>
  + insertExceedingNotification(notification: Notification): Promise<string>
  + insertIntrusionNotification(notification: Notification): Promise<string>
  + sendMailNotification(notification: Notification, contacts: Contact[]): void
  + deleteNotification(id: string): void
}
!endsub NotificationRoot
note left of NotificationService: Service
NotificationService --> MailService : uses
NotificationService --> NotificationRepository : uses
NotificationService --> NotificationFactory : uses

interface MailService {
  + sendMail(to: string, notification: Notification): void
}

interface NotificationRepository {
  + getNotifications(): Promise<Notification[]>
  + getNotificationById(notificationId: string): Promise<Notification>
  + insertExceedingNotification(notification: Notification): Promise<string>
  + insertIntrusionNotification(notification: Notification): Promise<string>
  + deleteNotification(notificationId: string): Promise<void>
}
note right of NotificationRepository : Repository
NotificationRepository o-- Notification


interface Notification {
  + notificationId(): string
  + timestamp(): Date
  + anomaly(): Anomaly
}
note left of Notification: Entity

interface NotificationFactory {
  + createExceedingNotification(id: string, exceeding: Exceeding): Notification
  + createIntrusionNotification(id: string, intrusion: Intrusion): Notification
}
note right of NotificationFactory : Factory
NotificationFactory -left-> Notification : creates

@enduml
