"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[152],{2819:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>d});var t=i(4848),r=i(8453);const s={title:"Microservices",position:2},a="Microservices",o={id:"report/design/architecture/microservices",title:"Microservices",description:"Decomposition Strategy",source:"@site/docs/report/design/architecture/microservices.md",sourceDirName:"report/design/architecture",slug:"/report/design/architecture/microservices",permalink:"/revue/docs/report/design/architecture/microservices",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Microservices",position:2},sidebar:"tutorialSidebar",previous:{title:"Documentation",permalink:"/revue/docs/report/design/architecture/documentation"},next:{title:"Microservices patterns",permalink:"/revue/docs/report/design/architecture/patterns"}},c={},d=[{value:"Decomposition Strategy",id:"decomposition-strategy",level:2},{value:"API Design",id:"api-design",level:2},{value:"Auth service",id:"auth-service",level:3},{value:"Alarm service",id:"alarm-service",level:3},{value:"User service",id:"user-service",level:3},{value:"Location service",id:"location-service",level:3},{value:"Device service",id:"device-service",level:3},{value:"Recognition service",id:"recognition-service",level:3},{value:"Monitoring service",id:"monitoring-service",level:3},{value:"Notification service",id:"notification-service",level:3},{value:"Log service",id:"log-service",level:3},{value:"Clean Architecture",id:"clean-architecture",level:2}];function l(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components},{Summary:s}=n;return s||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Summary",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"microservices",children:"Microservices"})}),"\n",(0,t.jsx)(n.h2,{id:"decomposition-strategy",children:"Decomposition Strategy"}),"\n",(0,t.jsxs)(n.p,{children:["The system is decomposed into microservices using the ",(0,t.jsx)(n.strong,{children:"bounded context"})," decomposition strategy.\nOther relevant characteristics that have been taken into account are:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Scalability"}),": Each microservice can be scaled independently."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Technology"}),": Each microservice can be implemented using different technologies."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Modularity"}),": Each microservice can be developed, deployed, and maintained independently."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Maintainability"}),": Each microservice can be updated independently without affecting the entire system."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"api-design",children:"API Design"}),"\n",(0,t.jsx)(n.p,{children:"Starting from the use cases, we defined the APIs for each microservice.\nThe APIs are defined using the OpenAPI Specification."}),"\n",(0,t.jsx)(n.h3,{id:"auth-service",children:"Auth service"}),"\n",(0,t.jsx)(n.p,{children:"This microservice is responsible for authentication and authorization. It is responsible for managing user accounts,\nroles, and permissions. It is also responsible for generating JWT tokens for accessing other services in the system."}),"\n",(0,t.jsx)(s,{title:"Feature: Authentication",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-gherkin",children:"Feature: Authentication\n\n  Scenario: User login\n    Given I have a valid username and password\n    When I login\n    Then I should receive a JWT token\n\n  Scenario: User logout\n    Given I am logged in\n    When I logout\n    Then I should no longer have access to the system\n"})})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://revue-org.github.io/revue/openapi/auth/",children:"OpenAPI Specification"})}),"\n",(0,t.jsx)(n.h3,{id:"alarm-service",children:"Alarm service"}),"\n",(0,t.jsxs)(n.p,{children:["This microservice is responsible for analyzing the data coming from sensors and cameras and consequently notifying\nanomalies.\nTo recognize anomalies, some rule must be defined.\nThe main operations of this service are those to manage the ",(0,t.jsx)(n.em,{children:"security rules"}),"."]}),"\n",(0,t.jsx)(s,{title:"Feature: Security Rule Management",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-gherkin",children:"Feature: Security Rule Management\n\n  Scenario: Create a security rule\n    Given I am logged in as a Guardian\n    When I create a security rule in the system\n    Then the alarm service should check the security rule\n    And trigger an alarm if the conditions are satisfied\n\n  Scenario: Update a security rule\n    Given I am logged in as a Guardian\n    When I update a security rule in the system\n    Then the alarm service should check the updated security rule\n    And trigger an alarm if the new conditions are satisfied\n\n  Scenario: Delete a security rule\n    Given I am logged in as a Guardian\n    When I delete a security rule from the system\n    Then the alarm service should no longer check the deleted security rule\n"})})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://revue-org.github.io/revue/openapi/alarm/",children:"OpenAPI Specification"})}),"\n",(0,t.jsx)(n.h3,{id:"user-service",children:"User service"}),"\n",(0,t.jsx)(n.p,{children:"This microservice is responsible for managing user data."}),"\n",(0,t.jsx)(s,{title:"Feature: User Management",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-gherkin",children:"Feature: User Management\n\n  Scenario: Create a new user\n    Given I am logged in as an Admin\n    When I create a new user in the system\n    Then the user should be able to access and consult the system\n\n  Scenario: Modify user contact information\n    Given I am logged in as an Admin\n    When I update the contact information for a user\n    Then the user\u2019s contact information should be updated in the system\n\n  Scenario: Delete a user\n    Given I am logged in as an Admin\n    When I delete a user from the system\n    Then the user should be removed from the system\n"})})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://revue-org.github.io/revue/openapi/user/",children:"OpenAPI Specification"})}),"\n",(0,t.jsx)(n.h3,{id:"location-service",children:"Location service"}),"\n",(0,t.jsx)(n.p,{children:"Devices can be located in different locations.\nThe system provides the possibility to manage rooms and buildings."}),"\n",(0,t.jsx)(s,{title:"Feature: Location Management",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-gherkin",children:"Feature: Location Management\n\n  Scenario: Create a new location\n    Given I am logged in as an Admin\n    When I create a new location in the system\n    Then the location should be created in the system\n    And I should be able to assign Guardians to it\n\n  Scenario: Delete a location\n    Given I am logged in as an Admin\n    When I delete a location from the system\n    Then the location should be removed from the system\n    And Guardians should no longer have access to it\n"})})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://revue-org.github.io/revue/openapi/location/",children:"OpenAPI Specification"})}),"\n",(0,t.jsx)(n.h3,{id:"device-service",children:"Device service"}),"\n",(0,t.jsx)(n.p,{children:"This microservice is responsible for managing devices. It can federate a device, modify their description, enable or\ndisable, and delete them."}),"\n",(0,t.jsx)(s,{title:"Feature: Device Management",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-gherkin",children:"Feature: Device Management\n\n  Scenario: Federate a device\n    Given I am logged in as a Guardian\n    When I federate a device in the system\n    Then the device should be federated in the system\n    And I should be able to consult the device information and access its real-time data\n\n  Scenario: Modify device description\n    Given I am logged in as a Guardian\n    When I update the description of a device\n    Then the device description should be updated in the system\n\n  Scenario: Enable or disable a device\n    Given I am logged in as a Guardian\n    When I enable or disable a device in the system\n    Then the device should be enabled or disabled in the system\n    And the device should start or stop producing real-time data accordingly\n\n  Scenario: Delete a device\n    Given I am logged in as a Guardian\n    When I delete a device from the system\n    Then the device should be removed from the system\n"})})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://revue-org.github.io/revue/openapi/device/",children:"OpenAPI Specification"})}),"\n",(0,t.jsx)(n.h3,{id:"recognition-service",children:"Recognition service"}),"\n",(0,t.jsx)(n.p,{children:"This microservice provides the capability to recognize people and objects in video streams.\nIt then sends the recognized data to the alarm service."}),"\n",(0,t.jsx)(n.p,{children:"This service has no public API."}),"\n",(0,t.jsx)(n.h3,{id:"monitoring-service",children:"Monitoring service"}),"\n",(0,t.jsx)(n.p,{children:"This microservice is the main service that enables the user to monitor the system."}),"\n",(0,t.jsx)(s,{title:"Feature: Real-time Data and Video Streaming Consultation",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-gherkin",children:"Feature: Real-time Data and Video Streaming Consultation\n\n  Scenario: Consult real-time environment data from a specific device\n    Given I am logged in as a Guardian\n    When I consult the real-time environment data produced by a device with sensing capabilities\n    Then I should be able to see the data\n    And I should be able to choose the desired monitoring measure\n    And I should be able to consult the measurement value and unit\n\n  Scenario: Consult video streaming from a specific device\n    Given I am logged in as a Guardian\n    When I consult the video streaming produced by a device with video streaming capabilities\n    Then I should be able to see the video streaming produced by the device\n"})})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://revue-org.github.io/revue/openapi/monitoring/",children:"OpenAPI Specification"})}),"\n",(0,t.jsx)(n.h3,{id:"notification-service",children:"Notification service"}),"\n",(0,t.jsx)(n.p,{children:"This microservice is responsible for delivering notifications to the user."}),"\n",(0,t.jsx)(s,{title:"Feature: Notification Management",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-gherkin",children:"Feature: Notification Management\n\n  Scenario: Consult system notifications\n    Given I am logged in as a Guardian\n    When I consult the notifications sent by the system\n    Then I should be able to see the notification type, the date, and other notification properties\n\n  Scenario: Receive real-time notifications when an alarm is triggered\n    Given a security rule is broken\n    When an alarm is triggered\n    Then I should receive real-time notifications through the specified contacts\n    And I should be able to see and consult the notification in real-time\n"})})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://revue-org.github.io/revue/openapi/notification/",children:"OpenAPI Specification"})}),"\n",(0,t.jsx)(n.h3,{id:"log-service",children:"Log service"}),"\n",(0,t.jsx)(n.p,{children:"This microservice is responsible for logging system events."}),"\n",(0,t.jsx)(s,{title:"Feature: Data and Alarm History Consultation",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-gherkin",children:"Feature: Data and Alarm History Consultation\n\n  Scenario: Consult the history of produced data and triggered alarms\n    Given I am logged in as a Guardian\n    When I consult the history of produced data and triggered alarms\n    Then I should be able to see the history of data and alarms\n    And I should be able to take appropriate actions based on the history\n"})})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://revue-org.github.io/revue/openapi/log/",children:"OpenAPI Specification"})}),"\n",(0,t.jsx)(n.h2,{id:"clean-architecture",children:"Clean Architecture"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Clean Architecture",src:i(6260).A+"",width:"3268",height:"2006"})}),"\n",(0,t.jsxs)(n.p,{children:["The design of all relevant microservices follows the ",(0,t.jsx)(n.strong,{children:"Clean Architecture"})," pattern. This helped us\nin maintaining a core domain design that abstracts away from all technical issues. As showed in the\npicture above, we made use of the following layers:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Domain"}),": DDD entities, value objects, factories, ..."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Application"}),": DDD services, repositories, ..."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Presentation"}),": Machinery to translate external data representation to domain entities and vice versa."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Infrastructure"}),": Mostly external service implementation, DB interfaces, REST APIs, Events managers, ..."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Module view",src:i(9546).A+"",width:"622",height:"652"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},6260:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/clean_architecture-14258cafb9bcd596d75db2874fdd45eb.png"},9546:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/clean_architecture_modules-56b8ae04f38082e7b9cfe398c4f8e02b.png"},8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>o});var t=i(6540);const r={},s=t.createContext(r);function a(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);