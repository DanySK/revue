"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[1455],{738:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>l,frontMatter:()=>a,metadata:()=>r,toc:()=>h});var i=n(4848),s=n(8453);const a={title:"Web of Things",position:1},o="Web of Things",r={id:"report/implementation/web-of-thing",title:"Web of Things",description:"Introduction",source:"@site/docs/report/implementation/web-of-thing.md",sourceDirName:"report/implementation",slug:"/report/implementation/web-of-thing",permalink:"/revue/docs/report/implementation/web-of-thing",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Web of Things",position:1},sidebar:"tutorialSidebar",previous:{title:"Implementation details",permalink:"/revue/docs/report/implementation/"},next:{title:"DevOps",permalink:"/revue/docs/report/devops"}},c={},h=[{value:"Introduction",id:"introduction",level:2},{value:"Thing Descriptor",id:"thing-descriptor",level:2},{value:"Fundamental Concepts",id:"fundamental-concepts",level:2},{value:"Affordance",id:"affordance",level:3},{value:"Data Schemas",id:"data-schemas",level:3},{value:"Security",id:"security",level:3},{value:"Protocol Bindings",id:"protocol-bindings",level:3},{value:"Revue WoT Component",id:"revue-wot-component",level:2},{value:"Revue Sample Thing",id:"revue-sample-thing",level:2},{value:"Static Metadata",id:"static-metadata",level:3},{value:"Main Features",id:"main-features",level:3},{value:"Properties",id:"properties",level:4},{value:"Actions",id:"actions",level:4},{value:"Events",id:"events",level:4},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const t={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components},{Summary:n}=t;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Summary",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"web-of-things",children:"Web of Things"})}),"\n",(0,i.jsx)(t.h2,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsxs)(t.p,{children:["Revue is born with the aim of being as much as possible a flexible and scalable system.\nWith this perspective, the system has been designed to be compliant with the ",(0,i.jsx)(t.strong,{children:"Web of Things"})," (WoT) standards.\nWoT is a paradigm that standardizes the interactions between Internet of Things (IoT) devices, enabling them to integrate with the web, and in this case, with the Revue system."]}),"\n",(0,i.jsx)(t.h2,{id:"thing-descriptor",children:"Thing Descriptor"}),"\n",(0,i.jsxs)(t.p,{children:['The Web of Things (WoT) architecture is based on the concept of "Thing" that can be accessed and controlled over the web.\nA ',(0,i.jsx)(t.strong,{children:"Thing Description"}),' (TD) is a core component of WoT, acting as a formal description of a "Thing" (IoT device or entity).']}),"\n",(0,i.jsxs)(t.p,{children:["To be compliant with the WoT standards, Revue in his Device Management module contains a WoT Consumer that is able to consume TDs and interact with the devices described in them.\nThis interaction model has been possible thanks to the flexibility of the WoT standards that exploit the RESTful APIs at level 3 of the Richardson Maturity Model.\nInteractions are based on the ",(0,i.jsx)(t.strong,{children:"Hypermedia As The Engine Of the Application State"})," (HATEOAS) principle."]}),"\n",(0,i.jsx)(t.h2,{id:"fundamental-concepts",children:"Fundamental Concepts"}),"\n",(0,i.jsx)(t.h3,{id:"affordance",children:"Affordance"}),"\n",(0,i.jsx)(t.p,{children:"Since the WoT standards are based on the RESTful APIs, on the Web, the interaction with the devices is based on the affordance concept.\nAffordance is a property of an object that indicates how the object can be used and interacted with.\nIt is important to abstract in a way that the user can understand how to interact with the device without knowing other implementation details.\nIn Revue, all the possible interactions are kept easy to understand."}),"\n",(0,i.jsx)(t.h3,{id:"data-schemas",children:"Data Schemas"}),"\n",(0,i.jsx)(t.p,{children:"The data schemas are a fundamental part of the WoT standards defining the structure of the data that can be exchanged between the system and the devices.\nLike in all communication protocols, the data schemas are a key point to ensure the compatibility between devices and the system."}),"\n",(0,i.jsx)(t.h3,{id:"security",children:"Security"}),"\n",(0,i.jsx)(t.p,{children:"Defines the security mechanisms that can be used to interact with the devices.\nIn Revue, the sample thing descriptor uses the 'nosec' security scheme that is just a placeholder for the security definition,\nbut in a real scenario, it should be replaced with a real security scheme like a JWT token.\nIf no security scheme is defined, the Thing is considered as public and free to use."}),"\n",(0,i.jsx)(t.h3,{id:"protocol-bindings",children:"Protocol Bindings"}),"\n",(0,i.jsx)(t.p,{children:"The protocol bindings define the communication protocols that can be used to interact with the devices.\nIn Revue, the protocol binding used is the HTTP protocol for simple interactions,\nbut in the case of sensor, the Kafka protocol (binary over TCP) is used to stream the data."}),"\n",(0,i.jsx)(t.h2,{id:"revue-wot-component",children:"Revue WoT Component"}),"\n",(0,i.jsxs)(t.p,{children:["The Revue WoT Component is a core part of the system that allows the interaction with the devices described in the TDs.\nTo implement this component, Revue makes use of the ",(0,i.jsx)(t.a,{href:"https://github.com/eclipse-thingweb/node-wot",children:"node-wot"})," framework written in Node.js\nthat with a good level of abstraction simplifies the interaction with the devices."]}),"\n",(0,i.jsx)(n,{title:"Example: retrieving the status property of a device",children:(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-javascript",children:"const td = await this.wot.requestThingDescription(\n  `http://${device.endpoint.ipAddress}:${device.endpoint.port}/device`\n)\nconst thing = await this.wot.consume(td)\nconst data: any = await thing.readProperty('status')\nconst deviceStatus = await data.value()\n"})})}),"\n",(0,i.jsx)(t.p,{children:"Using this framework, all low-level details are abstracted, permitting to focus on the business logic of the system."}),"\n",(0,i.jsx)(t.h2,{id:"revue-sample-thing",children:"Revue Sample Thing"}),"\n",(0,i.jsxs)(t.p,{children:["With the Revue system, a ",(0,i.jsx)(t.a,{href:"https://github.com/revue-org/revue-sample-thing",children:"Sample Thing"})," has been created.\nThis sample thing is a device that can be managed by the Revue system and is compliant with the WoT standards.\nIn this case, the sample thing is a device with two capabilities: ",(0,i.jsx)(t.em,{children:"Sensing"})," and ",(0,i.jsx)(t.em,{children:"VideoStreaming"}),"."]}),"\n",(0,i.jsx)(t.h3,{id:"static-metadata",children:"Static Metadata"}),"\n",(0,i.jsx)(t.p,{children:"Static metadata is the metadata not expected to change during the lifetime of the device and contains high-level information about the device and its TD.\nIn the sample thing, the static metadata contains the device id, the device type, the device title and a human-readable description."}),"\n",(0,i.jsx)(n,{title:"Sample thing static metadata",children:(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-javascript",children:"{\n    context: [\n    'https://www.w3.org/2022/wot/td/v1.1',\n    {\n      cred: 'https://www.w3.org/2018/credentials#',\n      sec: 'https://w3id.org/security#'\n    }\n  ], \n    id: 'urn:dev:wot:thing-1',\n    type: 'Device',\n    title: 'device',\n    description: 'Thing Descriptor for a Revue Sample Device',\n    securityDefinitions: {\n      nosec_sc: {\n        scheme: 'nosec'\n      }\n    },\n    security: ['nosec_sc']\n}\n"})})}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.strong,{children:"Context"})," field is important in JSON-LD documents to define the used vocabulary in the TD.\nIn this case, the ",(0,i.jsx)(t.a,{href:"https://www.w3.org/TR/wot-thing-description11/",children:"WoT TD v1.1"})," has been used."]}),"\n",(0,i.jsx)(t.h3,{id:"main-features",children:"Main Features"}),"\n",(0,i.jsx)(t.h4,{id:"properties",children:"Properties"}),"\n",(0,i.jsx)(t.p,{children:"Properties represent dynamic attributes of the Thing.\nIn Revue, a fundamental property is the status of the device."}),"\n",(0,i.jsx)(n,{title:"Example: properties of a device",children:(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-javascript",children:"properties: {\n  status: {\n    type: 'object',\n      properties: {\n      id: {\n        type: 'string'\n      },\n      location: {\n        type: 'string'\n      },\n      enabled: {\n        type: 'boolean'\n      },\n      capabilities: {\n        type: 'array',\n          items: {\n          type: 'object',\n            scheme: {\n            anyOf: [\n              {\n                type: 'object',\n                properties: {\n                  type: {\n                    type: 'string',\n                    enum: ['sensor']\n                  },\n                  capturingInterval: {\n                    type: 'number'\n                  },\n                  measure: {\n                    type: 'object',\n                    properties: {\n                      type: {\n                        type: 'string',\n                        enum: ['temperature', 'humidity', 'pressure']\n                      },\n                      unit: {\n                        type: 'string',\n                        enum: ['celsius', 'fahrenheit', 'percentage', 'pascal', 'bar']\n                      } } } }\n              },\n              {\n                type: 'object',\n                properties: {\n                  type: {\n                    type: 'string',\n                    enum: ['camera']\n                  },\n                  resolution: {\n                    type: 'string',\n                    enum: ['576p', '720p', '1080p', '4k']\n                  } } } ] }\n        }\n      }\n    },\n    observable: true,\n      readOnly: true,\n      forms: [\n      {\n        contentType: 'application/json',\n        op: ['readproperty']\n      }\n    ]\n  }\n}\n"})})}),"\n",(0,i.jsxs)(t.p,{children:["With the keyword ",(0,i.jsx)(t.em,{children:"anyOf"})," it is possible to define a property that can have different but supported data schemas."]}),"\n",(0,i.jsx)(t.h4,{id:"actions",children:"Actions"}),"\n",(0,i.jsx)(t.p,{children:"Actions represent operations that can be invoked on the Thing."}),"\n",(0,i.jsx)(n,{title:"Example: actions of a device",children:(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-javascript",children:"actions: {\n  toggle: {\n    input: {\n      type: 'object',\n        properties: {\n        enable: {\n          type: 'boolean'\n        }\n      },\n      required: ['enable']\n    },\n    output: {\n      type: 'string'\n    },\n    forms: [\n      {\n        op: 'invokeaction',\n        contentType: 'application/json'\n      }\n    ]\n  }\n}\n"})})}),"\n",(0,i.jsxs)(t.p,{children:["In the sample thing, an action called ",(0,i.jsx)(t.em,{children:"toggle"})," has been defined that allows enabling or disabling the device."]}),"\n",(0,i.jsx)(t.h4,{id:"events",children:"Events"}),"\n",(0,i.jsx)(t.p,{children:"Events represent asynchronous notifications that can be emitted by the Thing."}),"\n",(0,i.jsx)(n,{title:"Example: events of a device",children:(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-javascript",children:"events: {\n  produce: {\n    data: { type: 'object' },\n    forms: [\n      {\n        href: 'kafka://broker.kafka.example.com:9092/measurements.thing-1',\n        subprotocol: 'kafka'\n      }\n    ]\n  }\n}\n"})})}),"\n",(0,i.jsxs)(t.p,{children:["In the sample thing, an event called ",(0,i.jsx)(t.em,{children:"produce"})," has been defined that emits the data produced by the sensors.\nNote the protocol binding specifying that the data will be sent to a Kafka broker using the Kafka protocol, on a topic named ",(0,i.jsx)(t.em,{children:"measurements.thing-1"}),"."]}),"\n",(0,i.jsx)(t.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsx)(t.p,{children:"In conclusion, the Revue system is compliant with the Web of Things standards, allowing the interaction with the devices in a simple and flexible way.\nThe system for now is able to interact only with devices with a simple behavior and with limited capabilities."})]})}function l(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>r});var i=n(6540);const s={},a=i.createContext(s);function o(e){const t=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(a.Provider,{value:t},e.children)}}}]);